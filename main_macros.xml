<macros>
    <token name="@VERSION@">0.0.1</token>

    <token name="@PROFILE@">20.01</token>

    <xml name="scimap_requirements">
        <requirements>
            <container type="docker">quay.io/goeckslab/scimap:0.17.7</container>
            <yield />
        </requirements>
    </xml>

    <xml name="vitessce_requirements">
        <requirements>
            <container type="docker">quay.io/goeckslab/vitessce:1.0.4</container>
        </requirements>
    </xml>

    <xml name="macro_stdio">
        <stdio>
            <exit_code range="1:" level="fatal" description="Error occurred. Please check Tool Standard Error" />
        </stdio>
    </xml>

    <xml name="scimap_spatial_options" token_label="spatial_aggregate">
        <section name="options" title="Advanced Options" expanded="false">
            <param argument="x_coordinate" type="text" value="X_centroid" optional="false" label="Column name containing the x-coordinates values" />
            <param argument="y_coordinate" type="text" value="Y_centroid" optional="false" label="Column name containing the y-coordinates values" />
            <yield/>
            <param argument="imageid" type="text" value="imageid" optional="true" label="Column name of the column containing the image id" />
            <param argument="subset" type="text" value="" optional="true" label="Imageid of a single image to be subsetted for analyis" />
            <param argument="label" type="text" value="@LABEL@" optional="true" label="Key for the returned data" help="Stored in adata.obs" />
        </section>
    </xml>

    <xml name="squidpy_requirements">
        <requirements>
            <container type="docker">quay.io/goeckslab/squidpy:1.1.2</container>
        </requirements>
    </xml>

    <xml name="squidpy_spatial_options">
        <section name="options" title="Advanced Graph Options" expanded="false">
            <yield/>
             <!-- <param argument="copy" type="hidden" value="false" help="If True, return the result, otherwise save it to the adata object." /> -->
        </section>
    </xml>

    <xml name="squidpy_plotting_options">
        <section name="plotting_options" title="Plotting Options" expanded="false">
            <yield />
            <!-- <param argument="legend_kwargs" type="text" value="" optional="true" label="Keyword arguments for matplotlib.pyplot.legend()" /> -->
            <param argument="figsize" type="text" value="" optional="true" label="Size of the figure in inches" help="Optional. e.g.: (12, 12)." />
            <param argument="dpi" type="integer" value="" optional="true" label="Dots per inch" help="Optional" />
        </section>
    </xml>

    <xml name="squidpy_plotting_option_palette">
        <param argument="palette" type="text" value="" optional="true" label="Categorical colormap for the clusters" help="Comma delimited for multiple. If None, use anndata.AnnData.uns ['{cluster_key}_colors'], if available." />
    </xml>

    <xml name="squidpy_plotting_options_more">
        <expand macro="squidpy_plotting_options">
            <yield />
            <param argument="annotate" type="boolean" checked="false" label="Whether to annotate the cells of the heatmap?" />
            <param argument="method" type="text" value="" optional="true" label="The linkage method to be used for dendrogram/clustering" help="see scipy.cluster.hierarchy.linkage()." />
            <param argument="title" type="text" value="" optional="true" label="The title of the plot" help="Optional." />
            <param argument="cmap" type="text" value="viridis" label="Continuous colormap to use" help="Refer to `matplotlib.pyplot.cmap`." />
            <!-- <param argument="cbar_kwargs" type="text" value="" label="Keyword arguments for matplotlib.figure.Figure.colorbar()" /> -->
            <expand macro="squidpy_plotting_option_palette" />
        </expand>
    </xml>

    <xml name="vitessce_cmd" token_tool_id="vitessce_spatial">
        <command>
        <![CDATA[
        export BF_MAX_MEM="\${GALAXY_MEMORY_MB}m" &&
        mkdir -p '${output.files_path}/A/0' &&
        ln -sf '$image' '${output.files_path}/A/0/image01.ome.tiff' &&
        #if $masks and $masks.ext == 'tiff'
            info=\$(showinf -nopix -nometa -noflat '${output.files_path}/A/0/image01.ome.tiff') &&
            echo '>showinf -nopix -nometa -noflat \$image' &&
            echo "\$info\n" &&
            masks_info=\$(showinf -nopix -nometa -noflat '$masks') &&
            echo '>showinf -nopix -nometa -noflat \$masks' &&
            echo "\$masks_info\n" &&
            n_resolutions=\$(echo "\$info" | grep '^\s*Resolutions\s*=' -m1 | cut -d'=' -f2 | xargs) &&
            pyramid_scale=1 &&
            if [ -z "\$n_resolutions" ]; then
                echo "Warning: Failded to retrieve the number of pyramid resolutions. Set pyramid resolutions to 4 and scale to 2!";
                n_resolutions=4;
                pyramid_scale=2;
            else
                echo "Found the number of pyramid resolutions: \$n_resolutions";
                if [ "\$n_resolutions" -gt 1 ]; then
                    sizeX0=\$(echo "\$info" | grep '^\s*sizeX\[0\]\s*=' -m1 | cut -d'=' -f2 | xargs) ;
                    sizeX1=\$(echo "\$info" | grep '^\s*sizeX\[1\]\s*=' -m1 | cut -d'=' -f2 | xargs) ;
                    if [ "\$sizeX0" -gt 0 ] && [ "\$sizeX1" -gt 0 ]; then
                        pyramid_scale=\$(((\$sizeX0 + \$sizeX1 / 2 ) / \$sizeX1));
                        echo "Calculate pyramid scale: \$sizeX0 / \$sizeX1 ~= \$pyramid_scale.";
                    else
                        pyramid_scale=2;
                        echo "Warning: Failed to calculate the pyramid scale; set it to 2!";
                    fi;
                fi ;
            fi &&
            convert_cmd="bfconvert -pyramid-resolutions \$n_resolutions -pyramid-scale \$pyramid_scale -noflat '$masks' '${output.files_path}/A/0/masks01.ome.tiff'" &&
            echo "\n>\$convert_cmd" &&
            eval \$convert_cmd &&
            masks_info_new=\$(showinf -nopix -nometa -noflat '${output.files_path}/A/0/masks01.ome.tiff') &&
            echo ">showinf -nopix -nometa -noflat '${output.files_path}/A/0/masks01.ome.tiff'" &&
            echo "\$masks_info_new\n" &&
        #elif $masks and $masks.ext == 'ome.tiff'
            ln -sf '$masks' '${output.files_path}/A/0/masks01.ome.tiff' &&
        #end if
        python '$__tool_directory__/@TOOL_ID@.py'
            --inputs '$inputs'
            --output '${output.files_path}'
            --image '${output.files_path}/A/0/image01.ome.tiff'
            #if $masks
                --masks '${output.files_path}/A/0/masks01.ome.tiff'
            #end if
            #if $do_phenotyping.phenotyping_choice
            --anndata '$anndata'
            #end if
            &&
        cp -R '$__tool_directory__/static' '${output.files_path}' &&
        cp '$__tool_directory__/index.html' '$output';

        ]]>
        </command>
    </xml>

</macros>
